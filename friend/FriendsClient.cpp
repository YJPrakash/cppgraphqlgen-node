// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "FriendsClient.h"

#include <algorithm>
#include <array>
#include <stdexcept>
#include <sstream>
#include <string_view>

using namespace std::literals;

namespace graphql::client {

using namespace query::Query;

template <>
Response::friend_Friend ModifiedResponse<Response::friend_Friend>::parse(response::Value&& response)
{
	Response::friend_Friend result;

	if (response.type() == response::Type::Map)
	{
		auto members = response.release<response::MapType>();

		for (auto& member : members)
		{
			if (member.first == R"js(cname)js"sv)
			{
				result.cname = ModifiedResponse<response::StringType>::parse<TypeModifier::Nullable>(std::move(member.second));
				continue;
			}
			if (member.first == R"js(isFriend)js"sv)
			{
				result.isFriend = ModifiedResponse<response::BooleanType>::parse<TypeModifier::Nullable>(std::move(member.second));
				continue;
			}
		}
	}

	return result;
}

template <>
Response::friends_Friend ModifiedResponse<Response::friends_Friend>::parse(response::Value&& response)
{
	Response::friends_Friend result;

	if (response.type() == response::Type::Map)
	{
		auto members = response.release<response::MapType>();

		for (auto& member : members)
		{
			if (member.first == R"js(cname)js"sv)
			{
				result.cname = ModifiedResponse<response::StringType>::parse<TypeModifier::Nullable>(std::move(member.second));
				continue;
			}
			if (member.first == R"js(isFriend)js"sv)
			{
				result.isFriend = ModifiedResponse<response::BooleanType>::parse<TypeModifier::Nullable>(std::move(member.second));
				continue;
			}
		}
	}

	return result;
}

namespace query::Query {

const std::string& GetRequestText() noexcept
{
	static const auto s_request = R"gql(
		query {
		    friend(cname:"SG002") {
		        cname
		        isFriend
		    }
		    friends {
		        cname
		        isFriend
		    }
		}
	)gql"s;

	return s_request;
}

const peg::ast& GetRequestObject() noexcept
{
	static const auto s_request = []() noexcept {
		auto ast = peg::parseString(GetRequestText());

		// This has already been validated against the schema by clientgen.
		ast.validated = true;

		return ast;
	}();

	return s_request;
}

Response parseResponse(response::Value&& response)
{
	Response result;

	if (response.type() == response::Type::Map)
	{
		auto members = response.release<response::MapType>();

		for (auto& member : members)
		{
			if (member.first == R"js(friend)js"sv)
			{
				result.friend = ModifiedResponse<Response::friend_Friend>::parse<TypeModifier::Nullable>(std::move(member.second));
				continue;
			}
			if (member.first == R"js(friends)js"sv)
			{
				result.friends = ModifiedResponse<Response::friends_Friend>::parse<TypeModifier::Nullable, TypeModifier::List, TypeModifier::Nullable>(std::move(member.second));
				continue;
			}
		}
	}

	return result;
}

} // namespace query::Query
} // namespace graphql::client
