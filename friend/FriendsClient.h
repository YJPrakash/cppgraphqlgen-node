// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef FRIENDSCLIENT_H
#define FRIENDSCLIENT_H

#include "graphqlservice/GraphQLClient.h"
#include "graphqlservice/GraphQLParse.h"
#include "graphqlservice/GraphQLResponse.h"

#include "graphqlservice/internal/Version.h"

// Check if the library version is compatible with clientgen 3.6.0
static_assert(graphql::internal::MajorVersion == 3, "regenerate with clientgen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 6, "regenerate with clientgen: minor version mismatch");

#include <optional>
#include <string>
#include <vector>

/// <summary>
/// Operation: query (unnamed)
/// </summary>
/// <code class="language-graphql">
/// query {
///     friend(cname:"SG002") {
///         cname
///         isFriend
///     }
///     friends {
///         cname
///         isFriend
///     }
/// }
/// </code>
namespace graphql::client::query::Query {

// Return the original text of the request document.
const std::string& GetRequestText() noexcept;

// Return a pre-parsed, pre-validated request object.
const peg::ast& GetRequestObject() noexcept;

struct Response
{
	struct friend_Friend
	{
		std::optional<response::StringType> cname {};
		std::optional<response::BooleanType> isFriend {};
	};

	struct friends_Friend
	{
		std::optional<response::StringType> cname {};
		std::optional<response::BooleanType> isFriend {};
	};

	std::optional<friend_Friend> friend {};
	std::optional<std::vector<std::optional<friends_Friend>>> friends {};
};

Response parseResponse(response::Value&& response);

} // namespace graphql::client::query::Query

#endif // FRIENDSCLIENT_H
