// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "FriendsSchema.h"

#include "graphqlservice/introspection/Introspection.h"

#include <algorithm>
#include <array>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <string_view>
#include <tuple>
#include <vector>

using namespace std::literals;

namespace graphql {
namespace friends {
namespace object {

Query::Query()
	: service::Object({
		"Query"
	}, {
		{ R"gql(__type)gql"sv, [this](service::ResolverParams&& params) { return resolve_type(std::move(params)); } },
		{ R"gql(friend)gql"sv, [this](service::ResolverParams&& params) { return resolveFriend(std::move(params)); } },
		{ R"gql(friends)gql"sv, [this](service::ResolverParams&& params) { return resolveFriends(std::move(params)); } },
		{ R"gql(__schema)gql"sv, [this](service::ResolverParams&& params) { return resolve_schema(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } }
	})
	, _schema(GetSchema())
{
}

service::FieldResult<std::shared_ptr<Friend>> Query::getFriend(service::FieldParams&&, std::optional<response::StringType>&&) const
{
	throw std::runtime_error(R"ex(Query::getFriend is not implemented)ex");
}

std::future<service::ResolverResult> Query::resolveFriend(service::ResolverParams&& params)
{
	auto argCname = service::ModifiedArgument<response::StringType>::require<service::TypeModifier::Nullable>("cname", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getFriend(service::FieldParams(std::move(params), std::move(directives)), std::move(argCname));
	resolverLock.unlock();

	return service::ModifiedResult<Friend>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::FieldResult<std::optional<std::vector<std::shared_ptr<Friend>>>> Query::getFriends(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Query::getFriends is not implemented)ex");
}

std::future<service::ResolverResult> Query::resolveFriends(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getFriends(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<Friend>::convert<service::TypeModifier::Nullable, service::TypeModifier::List, service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

std::future<service::ResolverResult> Query::resolve_typename(service::ResolverParams&& params)
{
	return service::ModifiedResult<response::StringType>::convert(response::StringType{ R"gql(Query)gql" }, std::move(params));
}

std::future<service::ResolverResult> Query::resolve_schema(service::ResolverParams&& params)
{
	return service::ModifiedResult<service::Object>::convert(std::static_pointer_cast<service::Object>(std::make_shared<introspection::Schema>(_schema)), std::move(params));
}

std::future<service::ResolverResult> Query::resolve_type(service::ResolverParams&& params)
{
	auto argName = service::ModifiedArgument<response::StringType>::require("name", params.arguments);
	const auto& baseType = _schema->LookupType(argName);
	std::shared_ptr<introspection::object::Type> result { baseType ? std::make_shared<introspection::Type>(baseType) : nullptr };

	return service::ModifiedResult<introspection::object::Type>::convert<service::TypeModifier::Nullable>(result, std::move(params));
}

Friend::Friend()
	: service::Object({
		"Friend"
	}, {
		{ R"gql(cname)gql"sv, [this](service::ResolverParams&& params) { return resolveCname(std::move(params)); } },
		{ R"gql(isFriend)gql"sv, [this](service::ResolverParams&& params) { return resolveIsFriend(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } }
	})
{
}

service::FieldResult<std::optional<response::StringType>> Friend::getCname(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Friend::getCname is not implemented)ex");
}

std::future<service::ResolverResult> Friend::resolveCname(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getCname(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::StringType>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

service::FieldResult<std::optional<response::BooleanType>> Friend::getIsFriend(service::FieldParams&&) const
{
	throw std::runtime_error(R"ex(Friend::getIsFriend is not implemented)ex");
}

std::future<service::ResolverResult> Friend::resolveIsFriend(service::ResolverParams&& params)
{
	std::unique_lock resolverLock(_resolverMutex);
	auto directives = std::move(params.fieldDirectives);
	auto result = getIsFriend(service::FieldParams(std::move(params), std::move(directives)));
	resolverLock.unlock();

	return service::ModifiedResult<response::BooleanType>::convert<service::TypeModifier::Nullable>(std::move(result), std::move(params));
}

std::future<service::ResolverResult> Friend::resolve_typename(service::ResolverParams&& params)
{
	return service::ModifiedResult<response::StringType>::convert(response::StringType{ R"gql(Friend)gql" }, std::move(params));
}

} // namespace object

Operations::Operations(std::shared_ptr<object::Query> query)
	: service::Request({
		{ "query", query }
	}, GetSchema())
	, _query(std::move(query))
{
}

void AddTypesToSchema(const std::shared_ptr<schema::Schema>& schema)
{
	auto typeQuery = schema::ObjectType::Make(R"gql(Query)gql"sv, R"md()md");
	schema->AddType(R"gql(Query)gql"sv, typeQuery);
	auto typeFriend = schema::ObjectType::Make(R"gql(Friend)gql"sv, R"md()md");
	schema->AddType(R"gql(Friend)gql"sv, typeFriend);

	typeQuery->AddFields({
		schema::Field::Make(R"gql(friend)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType("Friend"), {
			schema::InputValue::Make(R"gql(cname)gql"sv, R"md()md"sv, schema->LookupType("String"), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(friends)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::LIST, schema->LookupType("Friend")))
	});
	typeFriend->AddFields({
		schema::Field::Make(R"gql(cname)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType("String")),
		schema::Field::Make(R"gql(isFriend)gql"sv, R"md()md"sv, std::nullopt, schema->LookupType("Boolean"))
	});

	schema->AddQueryType(typeQuery);
}

std::shared_ptr<schema::Schema> GetSchema()
{
	static std::weak_ptr<schema::Schema> s_wpSchema;
	auto schema = s_wpSchema.lock();

	if (!schema)
	{
		schema = std::make_shared<schema::Schema>(false);
		introspection::AddTypesToSchema(schema);
		AddTypesToSchema(schema);
		s_wpSchema = schema;
	}

	return schema;
}

} // namespace friends
} // namespace graphql
