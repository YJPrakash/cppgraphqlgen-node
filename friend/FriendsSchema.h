// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef FRIENDSSCHEMA_H
#define FRIENDSSCHEMA_H

#include "graphqlservice/internal/Schema.h"

// Check if the library version is compatible with schemagen 3.6.0
static_assert(graphql::internal::MajorVersion == 3, "regenerate with schemagen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 6, "regenerate with schemagen: minor version mismatch");

#include <memory>
#include <string>
#include <vector>

namespace graphql {
namespace friends {
namespace object {

class Query;
class Friend;

class Query
	: public service::Object
{
protected:
	explicit Query();

public:
	virtual service::FieldResult<std::shared_ptr<Friend>> getFriend(service::FieldParams&& params, std::optional<response::StringType>&& cnameArg) const;
	virtual service::FieldResult<std::optional<std::vector<std::shared_ptr<Friend>>>> getFriends(service::FieldParams&& params) const;

private:
	std::future<service::ResolverResult> resolveFriend(service::ResolverParams&& params);
	std::future<service::ResolverResult> resolveFriends(service::ResolverParams&& params);

	std::future<service::ResolverResult> resolve_typename(service::ResolverParams&& params);
	std::future<service::ResolverResult> resolve_schema(service::ResolverParams&& params);
	std::future<service::ResolverResult> resolve_type(service::ResolverParams&& params);

	std::shared_ptr<schema::Schema> _schema;
};

class Friend
	: public service::Object
{
protected:
	explicit Friend();

public:
	virtual service::FieldResult<std::optional<response::StringType>> getCname(service::FieldParams&& params) const;
	virtual service::FieldResult<std::optional<response::BooleanType>> getIsFriend(service::FieldParams&& params) const;

private:
	std::future<service::ResolverResult> resolveCname(service::ResolverParams&& params);
	std::future<service::ResolverResult> resolveIsFriend(service::ResolverParams&& params);

	std::future<service::ResolverResult> resolve_typename(service::ResolverParams&& params);
};

} // namespace object

class Operations
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query);

private:
	std::shared_ptr<object::Query> _query;
};

std::shared_ptr<schema::Schema> GetSchema();

} // namespace friends
} // namespace graphql

#endif // FRIENDSSCHEMA_H
